/*
 *   MainUI.java
 *
 *   Copyright (C) 2006, 2007 Alexander Technological Educational Institute of Thessaloniki
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 
 *   You should have received a copy of the GNU General Public License along
 *   with this program; if not, write to the Free Software Foundation, Inc.,
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

package org.graphnetwork.ui;

/* swing and awt classes */
import javax.swing.JOptionPane;
import java.awt.Dimension;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Container;
import java.awt.Frame;
import java.awt.Component;
import java.awt.Cursor;

/* jgrapht classes */
import org.jgrapht.graph.ListenableUndirectedWeightedGraph;
import org.jgrapht.experimental.touchgraph.TouchgraphPanel;
import org.jgrapht.alg.DijkstraShortestPath;
import org.jgrapht.alg.BellmanFordShortestPath;
import org.jgrapht.traverse.BreadthFirstIterator;
import org.jgrapht.traverse.DepthFirstIterator;

/* resolve ambiguity between jgrapht and this application */
import org.graphnetwork.jgrapht.graph.DefaultWeightedEdge;

/* core java classes */
import java.util.Vector;
import java.io.File;
import java.applet.AudioClip;

/**
 *
 * @author  faif
 */
public class MainUI extends javax.swing.JApplet {
    /* the default size of the applet and the displayed graph */
    static public final Dimension DEFSIZE;
    
    /* the default background color */
    static public final Color DEFAULTBG;
    
    /* used to play event sounds */
    private AudioClip clip;
    
    
    /* a JGraphT graph */
    private ListenableUndirectedWeightedGraph
            <java.lang.String, DefaultWeightedEdge> g;
    
    /* initialize the constants */
    static {
        DEFSIZE = new Dimension(800, 600);
        DEFAULTBG = new Color(0x01, 0x11, 0x44);
    }
    
    /**
     * {@inheritDoc}
     */
    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    /* initialize the Swing components */
                    initComponents();
                    
                    /* change the default size of the applet */
                    resize(DEFSIZE);
                    
                    /* change the bg color of the components (same as the graph) */
                    spacePane.setBackground(DEFAULTBG);
                    graphPane.setBackground(DEFAULTBG);
                    
                    // set the focus to the menubar (for the accelerators to work)
                    menuBar.requestFocus();
                    
                    try {
                        clip = getAudioClip(getCodeBase(), "click.wav");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    /**
     * Need this to find the parent frame
     * and set it as parent of the Dialogs...
     * (a common problem with applets)
     *
     * @return The parent frame of this applet
     *
     */
    private Frame getParentFrame(){
        Container c = this;
        while(c != null){
            if (c instanceof Frame)
                return (Frame)c;
            
            c = c.getParent();
        }
        return (Frame)null;
    }
    
    /**
     * Initializes the graph instance
     *
     * @param gr a graph instance to set the current equal to
     */
    public void setGraph(ListenableUndirectedWeightedGraph gr) {
        g = gr;
    }
    
    
    /**
     * Enables/disables some menu components
     * (those that can't be used before the
     * creation of the graph, etc).
     *
     * @param b true to enable the components
     *
     */
    public void setMenuComponentsEnabled(boolean b) {
        weightsIt.setEnabled(true);
        algoMenu.setEnabled(true);
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        graphPane = new javax.swing.JPanel();
        spacePane = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        graphMenu = new javax.swing.JMenu();
        randomGIt = new javax.swing.JMenuItem();
        weightsIt = new javax.swing.JMenuItem();
        algoMenu = new javax.swing.JMenu();
        sPAlgMenu = new javax.swing.JMenu();
        bfIt = new javax.swing.JMenuItem();
        dijkstraIt = new javax.swing.JMenuItem();
        travAlgMenu = new javax.swing.JMenu();
        dfsIt = new javax.swing.JMenuItem();
        bfsIt = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        usageIt = new javax.swing.JMenuItem();
        aboutIt = new javax.swing.JMenuItem();

        graphPane.setLayout(new java.awt.BorderLayout());

        graphPane.setMaximumSize(new java.awt.Dimension(600, 400));
        graphPane.setMinimumSize(new java.awt.Dimension(600, 400));
        graphPane.setPreferredSize(new java.awt.Dimension(600, 400));
        getContentPane().add(graphPane, java.awt.BorderLayout.CENTER);

        spacePane.setPreferredSize(new java.awt.Dimension(100, 101));
        getContentPane().add(spacePane, java.awt.BorderLayout.NORTH);

        graphMenu.setMnemonic('G');
        graphMenu.setText("Graph");
        randomGIt.setMnemonic('R');
        randomGIt.setText("Create random graph");
        randomGIt.setToolTipText("Create a simple graph with a random number of vertices and edges");
        randomGIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomGItActionPerformed(evt);
            }
        });

        graphMenu.add(randomGIt);

        weightsIt.setMnemonic('W');
        weightsIt.setText("Display weights");
        weightsIt.setToolTipText("Display the weights of the edges");
        weightsIt.setEnabled(false);
        weightsIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightsItActionPerformed(evt);
            }
        });

        graphMenu.add(weightsIt);

        menuBar.add(graphMenu);

        algoMenu.setMnemonic('A');
        algoMenu.setText("Algorithms");
        algoMenu.setToolTipText("");
        algoMenu.setEnabled(false);
        sPAlgMenu.setMnemonic('P');
        sPAlgMenu.setText("Best Path");
        sPAlgMenu.setToolTipText("<html>Algorithms which try to find the best path<br>by using the weight of the edges as a factor</html>");
        bfIt.setMnemonic('B');
        bfIt.setText("Bellman-Ford");
        bfIt.setToolTipText("Bellman-Ford");
        bfIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfItActionPerformed(evt);
            }
        });

        sPAlgMenu.add(bfIt);

        dijkstraIt.setMnemonic('D');
        dijkstraIt.setText("Dijkstra");
        dijkstraIt.setToolTipText("Dijkstra's Shortest Path First");
        dijkstraIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijkstraItActionPerformed(evt);
            }
        });

        sPAlgMenu.add(dijkstraIt);

        algoMenu.add(sPAlgMenu);

        travAlgMenu.setMnemonic('T');
        travAlgMenu.setText("Traversal");
        travAlgMenu.setToolTipText("<html>Graph traversal algorithms,<br>which do not use weight as a factor</html>");
        dfsIt.setMnemonic('S');
        dfsIt.setText("DFS");
        dfsIt.setToolTipText("Depth First Search");
        dfsIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dfsItActionPerformed(evt);
            }
        });

        travAlgMenu.add(dfsIt);

        bfsIt.setMnemonic('F');
        bfsIt.setText("BFS");
        bfsIt.setToolTipText("Breadth First Search");
        bfsIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfsItActionPerformed(evt);
            }
        });

        travAlgMenu.add(bfsIt);

        algoMenu.add(travAlgMenu);

        menuBar.add(algoMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");
        usageIt.setMnemonic('Q');
        usageIt.setText("Quick Usage");
        usageIt.setToolTipText("Short description of how to use the GraphNetwork");
        usageIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usageItActionPerformed(evt);
            }
        });

        helpMenu.add(usageIt);

        aboutIt.setMnemonic('B');
        aboutIt.setText("About");
        aboutIt.setToolTipText("Information related with GraphNetwork");
        aboutIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItActionPerformed(evt);
            }
        });

        helpMenu.add(aboutIt);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

    }// </editor-fold>//GEN-END:initComponents
    
    private void usageItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usageItActionPerformed
        clip.play();
        
        QuickUsageUI qu = new QuickUsageUI(getParentFrame(),
                false);
        qu.setVisible(true);
    }//GEN-LAST:event_usageItActionPerformed
    
    private void aboutItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItActionPerformed
        clip.play();
        
        AboutUI ab = new AboutUI(getParentFrame(),
                false);
        ab.setVisible(true);
    }//GEN-LAST:event_aboutItActionPerformed
    
    private void dfsItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dfsItActionPerformed
        clip.play();
        
        final String TITLE = "Depth First";
        ChoiceOfTwoVerticesUI u =
                new ChoiceOfTwoVerticesUI(getParentFrame(),
                true, g.vertexSet().toArray(), TITLE);
        u.setVisible(true);
        
        // if the show button is clicked execute the algorithm and
        // show the results
        if(u.isShowButtonClicked()) {
            Vector vec = new Vector();
            
            Object src = u.getSource();
            Object dst = u.getDestination();
            
            DepthFirstIterator df = new
                    DepthFirstIterator(g, src);
            
            boolean found = false;
            int cost = 0;
            
            while(!found && df.hasNext()) {
                Object v1 = df.next();
                vec.add(v1);
                ++cost;
                
                if(v1.toString() == dst.toString()) {
                    found = true;
                }
            }
            
            ShortestPathAlgResultsUI spu = new
                    ShortestPathAlgResultsUI(getParentFrame(),
                    false, TITLE, src, dst, cost,
                    cost, vec.toArray());
            
            spu.setVisible(true);
        }
    }//GEN-LAST:event_dfsItActionPerformed
    
    private void bfsItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfsItActionPerformed
        clip.play();
        
        final String TITLE = "Breadth First";
        ChoiceOfTwoVerticesUI u =
                new ChoiceOfTwoVerticesUI(getParentFrame(),
                true, g.vertexSet().toArray(), TITLE);
        u.setVisible(true);
        
        // if the show button is clicked execute the algorithm and
        // show the results
        if(u.isShowButtonClicked()) {
            Vector vec = new Vector();
            
            Object src = u.getSource();
            Object dst = u.getDestination();
            
            BreadthFirstIterator bf = new
                    BreadthFirstIterator(g, src);
            
            boolean found = false;
            int cost = 0;
            
            while(!found && bf.hasNext()) {
                Object v1 = bf.next();
                vec.add(v1);
                ++cost;
                
                if(v1.toString() == dst.toString()) {
                    found = true;
                }
            }
            
            ShortestPathAlgResultsUI spu = new
                    ShortestPathAlgResultsUI(getParentFrame(),
                    false, TITLE, src, dst, cost,
                    cost, vec.toArray());
            
            spu.setVisible(true);
        }
    }//GEN-LAST:event_bfsItActionPerformed
    
    private void bfItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfItActionPerformed
        clip.play();
        
        final String TITLE = "Bellman - Ford";
        ChoiceOfTwoVerticesUI u =
                new ChoiceOfTwoVerticesUI(getParentFrame(),
                true, g.vertexSet().toArray(), TITLE);
        u.setVisible(true);
        
        // if the show button is clicked execute the algorithm and
        // show the results
        if(u.isShowButtonClicked()) {
            Object src = u.getSource();
            Object dst = u.getDestination();
            
            BellmanFordShortestPath bfs = new
                    BellmanFordShortestPath(g, src);
            
            Object p[] = bfs.getPathEdgeList(dst).toArray();
            
            float c = 0; // the total cost of the path
            
            for(int i = 0; i < p.length; ++i)
                c += ((DefaultWeightedEdge)p[i]).getWeight();
            
            
            ShortestPathAlgResultsUI spu = new
                    ShortestPathAlgResultsUI(getParentFrame(),
                    false, TITLE, src, dst, (int)bfs.getCost(dst),
                    c, p);
            
            spu.setVisible(true);
            
        }
    }//GEN-LAST:event_bfItActionPerformed
    
    /**
     * Show the ui to choose algorithm's parameters
     */
    private void dijkstraItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijkstraItActionPerformed
        clip.play();
        
        final String TITLE = "Shortest Path First";
        ChoiceOfTwoVerticesUI u =
                new ChoiceOfTwoVerticesUI(getParentFrame(),
                true, g.vertexSet().toArray(), TITLE);
        
        u.setVisible(true);
        
        // if the show button is clicked execute the algorithm and
        // show the results
        if(u.isShowButtonClicked()) {
            Object src = u.getSource();
            Object dst = u.getDestination();
            
            DijkstraShortestPath dij = new
                    DijkstraShortestPath(g, src, dst);
            
            Object p[] = dij.getPathEdgeList().toArray();
            
            float c = 0; // the total cost of the path
            
            for(int i = 0; i < p.length; ++i)
                c += ((DefaultWeightedEdge)p[i]).getWeight();
            
            ShortestPathAlgResultsUI spu = new
                    ShortestPathAlgResultsUI(getParentFrame(),
                    false, TITLE, src, dst, (int)dij.getPathLength(),
                    c, dij.getPathEdgeList().toArray());
            
            spu.setVisible(true);
        }
    }//GEN-LAST:event_dijkstraItActionPerformed
    
    /**
     * Display the weights of the edges
     */
    private void weightsItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightsItActionPerformed
        clip.play();
        
        WeightsUI u = new WeightsUI(getParentFrame(),
                false, g);
        u.setVisible(true);
    }//GEN-LAST:event_weightsItActionPerformed
    
    
    /**
     * Show the ui to create the random graph
     */
    private void randomGItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomGItActionPerformed
        clip.play();
        
        RandomGraphUI r = new RandomGraphUI(getParentFrame(), true, this);
        r.setVisible(true);
        
        // if the user pressed create add the random graph
        if(r.isCreateButtonClicked()) {
            try {
                // remove the old graph (if exists)
                graphPane.remove(graphPane.getComponent(0));
            } catch (Exception e) {}
            try {
                // change the cursor to wait, add the graph and change it back again
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                getParentFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                graphPane.add(new TouchgraphPanel<java.lang.String, DefaultWeightedEdge>(g, false));
                
                // enable the components after the creation
                setMenuComponentsEnabled(true);
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                getParentFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                
                // display the changes
                validate();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_randomGItActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutIt;
    private javax.swing.JMenu algoMenu;
    private javax.swing.JMenuItem bfIt;
    private javax.swing.JMenuItem bfsIt;
    private javax.swing.JMenuItem dfsIt;
    private javax.swing.JMenuItem dijkstraIt;
    private javax.swing.JMenu graphMenu;
    private javax.swing.JPanel graphPane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem randomGIt;
    private javax.swing.JMenu sPAlgMenu;
    private javax.swing.JPanel spacePane;
    private javax.swing.JMenu travAlgMenu;
    private javax.swing.JMenuItem usageIt;
    private javax.swing.JMenuItem weightsIt;
    // End of variables declaration//GEN-END:variables
    
}
